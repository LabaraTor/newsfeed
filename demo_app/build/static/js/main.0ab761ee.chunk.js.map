{"version":3,"sources":["EventPopover.js","Newsfeed.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["SubmitEventPopover","state","inputData","visible","hide","setState","handleVisibleChange","handleInputChange","event","target","value","type","checked","name","handleInputDataFormSubmit","props","handleSendEvent","content","layout","onSubmit","Item","placeholder","onChange","this","htmlType","title","trigger","onVisibleChange","key","React","Component","SubscribeEventPopover","handleSubscribe","label","style","width","Object","entries","newsFeeds","map","newsFeedId","Option","OptionsEventPopover","handleUnsubscribe","subscriptions","item","to_newsfeed_id","id","onClick","getSubscriptions","NewsFeed","events","getEvents","url","index","fetch","then","response","json","dataJson","results","catch","error","console","eventData","preventDefault","data","field_1","method","mode","body","JSON","stringify","headers","Accept","refreshNewsFeeds","handleDeleteEvent","eventId","axios","delete","extra","count","length","showZero","backgroundColor","color","boxShadow","hoverable","marginTop","actions","overflow","height","datetime","moment","unix","published_at","format","theme","fontSize","marginLeft","cursor","generateId","Math","random","toString","substring","Date","getTime","App","createNewsFeed","prevState","localStorage","setItem","setTimeout","refs","clearNewsFeedsStorage","clear","getItem","parse","feedsFromStorage","feed","params","button","className","disabled","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ab761ee.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, Icon, Input, Popover, Select } from \"antd\";\n\nexport class SubmitEventPopover extends React.Component {\n  state = {\n    inputData: \"\",\n    visible: false\n  };\n\n  hide = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  handleVisibleChange = visible => {\n    this.setState({ visible });\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleInputDataFormSubmit = event => {\n    this.props.handleSendEvent(event, this.state.inputData);\n    this.hide();\n    this.setState(() => {\n      return {\n        inputData: \"\"\n      };\n    });\n  };\n\n  render() {\n    const content = (\n      <Form\n        layout=\"inline\"\n        onSubmit={event => this.handleInputDataFormSubmit(event)}\n      >\n        <Form.Item>\n          <Input\n            placeholder=\"New event\"\n            name=\"inputData\"\n            onChange={this.handleInputChange}\n            value={this.state.inputData}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Send event\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n    return (\n      <Popover\n        content={content}\n        title=\"New event\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.handleVisibleChange}\n      >\n        <Icon type=\"edit\" key=\"edit\" />\n      </Popover>\n    );\n  }\n}\n\nexport class SubscribeEventPopover extends React.Component {\n  state = {\n    inputData: \"\",\n    visible: false\n  };\n\n  hide = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  handleVisibleChange = visible => {\n    this.setState({ visible });\n  };\n\n  handleInputChange = value => {\n    this.setState({\n      inputData: value\n    });\n  };\n\n  handleInputDataFormSubmit = event => {\n    this.props.handleSubscribe(event, this.state.inputData);\n    this.hide();\n    this.setState(() => {\n      return {\n        inputData: \"\"\n      };\n    });\n  };\n\n  render() {\n    const content = (\n      <Form\n        layout=\"inline\"\n        onSubmit={event => this.handleInputDataFormSubmit(event)}\n      >\n        <Form.Item label=\"Select\">\n          <Select\n            style={{ width: 200 }}\n            placeholder=\"Select a newsfeed\"\n            value={this.state.inputData}\n            onChange={this.handleInputChange}\n          >\n            {Object.entries(this.props.newsFeeds).map(([key, value]) => {\n              if (key !== this.props.newsFeedId) {\n                return (\n                  <Select.Option key={key} value={key}>\n                    {value.name}\n                  </Select.Option>\n                );\n              }\n            })}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Subscribe\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n    return (\n      <Popover\n        content={content}\n        title=\"Subscribe\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.handleVisibleChange}\n      >\n        <Icon type=\"ellipsis\" key=\"ellipsis\" />\n      </Popover>\n    );\n  }\n}\n\nexport class OptionsEventPopover extends React.Component {\n  state = {\n    inputData: \"\",\n    visible: false\n  };\n\n  hide = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  handleVisibleChange = visible => {\n    this.setState({ visible });\n  };\n\n  handleInputChange = value => {\n    this.setState({\n      inputData: value\n    });\n  };\n\n  handleInputDataFormSubmit = event => {\n    this.props.handleUnsubscribe(event, this.state.inputData);\n    this.hide();\n    this.setState(() => {\n      return {\n        inputData: \"\"\n      };\n    });\n  };\n\n  render() {\n    const content = (\n      <Form\n        layout=\"inline\"\n        onSubmit={event => this.handleInputDataFormSubmit(event)}\n      >\n        <Form.Item label=\"Select\">\n          <Select\n            style={{ width: 200 }}\n            placeholder=\"Select a newsfeed\"\n            value={this.state.inputData}\n            onChange={this.handleInputChange}\n          >\n            {this.props.subscriptions.map((item) => {\n              if (this.props.newsFeeds[item.to_newsfeed_id]) {\n                return (\n                  <Select.Option key={item.id} value={item.id}>\n                    {this.props.newsFeeds[item.to_newsfeed_id].name}\n                  </Select.Option>\n                );\n              }\n            })}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Unsubscribe\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n    return (\n      <Popover\n        content={content}\n        title=\"Handle Subscriptions\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.handleVisibleChange}\n        onClick={this.props.getSubscriptions}\n      >\n        <Icon type=\"setting\" key=\"setting\" />\n      </Popover>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card, Icon, Comment, Tooltip, Badge } from \"antd\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport {\n  SubmitEventPopover,\n  SubscribeEventPopover,\n  OptionsEventPopover\n} from \"./EventPopover\";\n\nexport class NewsFeed extends React.Component {\n  state = {\n    events: [],\n    subscriptions: []\n  };\n\n  componentDidMount() {\n    this.getEvents();\n    this.getSubscriptions();\n  }\n\n  getEvents = () => {\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/events/`;\n    fetch(url)\n      .then(response => response.json())\n      .then(dataJson => {\n        this.setState(() => {\n          return {\n            events: dataJson.results\n          };\n        });\n      })\n      .catch(error => console.error(\"Bad request:\", error));\n  };\n\n  getSubscriptions = () => {\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/subscriptions/`;\n    fetch(url)\n      .then(response => response.json())\n      .then(dataJson => {\n        this.setState(() => {\n          return {\n            subscriptions: dataJson.results\n          };\n        });\n      })\n      .catch(error => console.error(\"Bad request:\", error));\n  };\n\n  handleSendEvent = (event, eventData) => {\n    event.preventDefault();\n    if (!eventData) {\n      return false;\n    }\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/events/`;\n    const data = { data: { field_1: eventData } };\n\n    fetch(url, {\n      method: \"POST\",\n      mode: \"no-cors\",\n      body: JSON.stringify(data),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).catch(error => console.error(\"Bad request:\", error));\n\n    this.props.refreshNewsFeeds();\n  };\n\n  handleDeleteEvent = eventId => {\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/events/${eventId}/`;\n    axios.delete(url).catch(error => console.error(\"Bad request:\", error));\n    this.props.refreshNewsFeeds();\n  };\n\n  handleSubscribe = (event, eventData) => {\n    event.preventDefault();\n    if (!eventData) {\n      return false;\n    }\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/subscriptions/`;\n    const data = { to_newsfeed_id: eventData };\n\n    fetch(url, {\n      method: \"POST\",\n      mode: \"no-cors\",\n      body: JSON.stringify(data),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).catch(error => console.error(\"Bad request:\", error));\n  };\n\n  handleUnsubscribe = (event, eventData) => {\n    event.preventDefault();\n    if (!eventData) {\n      return false;\n    }\n    const url = `http://127.0.0.1:8000/api/newsfeed/${this.props.index}/subscriptions/${eventData}/`;\n    axios.delete(url).catch(error => console.error(\"Bad request:\", error));\n  };\n\n  render() {\n    return (\n      <Card\n        key={this.props.index}\n        title={this.props.value.name}\n        extra={\n          <Badge\n            count={this.state.events.length}\n            showZero={true}\n            style={{\n              backgroundColor: \"#fff\",\n              color: \"#999\",\n              boxShadow: \"0 0 0 1px #d9d9d9 inset\"\n            }}\n          />\n        }\n        hoverable={true}\n        style={{ width: 220, marginTop: 4 }}\n        actions={[\n          <SubmitEventPopover handleSendEvent={this.handleSendEvent} />,\n          <SubscribeEventPopover\n            handleSubscribe={this.handleSubscribe}\n            newsFeeds={this.props.newsFeeds}\n            newsFeedId={this.props.index}\n          />,\n          <OptionsEventPopover\n            handleSubscribe={this.handleSubscribe}\n            subscriptions={this.state.subscriptions}\n            getSubscriptions={this.getSubscriptions}\n            newsFeeds={this.props.newsFeeds}\n            handleUnsubscribe={this.handleUnsubscribe}\n          />\n        ]}\n      >\n        <div style={{ overflow: \"auto\", height: 200 }}>\n          {this.state.events.map(event => {\n            return (\n              <Comment\n                key={event.id}\n                content={<p>{event.data.field_1}</p>}\n                datetime={\n                  <Tooltip\n                    title={moment\n                      .unix(event.published_at)\n                      .format(\"YYYY-MM-DD HH:mm:ss\")}\n                  >\n                    <span>\n                      {moment\n                        .unix(event.published_at)\n                        .format(\"YYYY-MM-DD HH:mm:ss\")}\n                    </span>\n                    <span>\n                      <Icon\n                        type=\"delete\"\n                        theme=\"twoTone\"\n                        style={{\n                          fontSize: 14,\n                          marginLeft: 15,\n                          cursor: \"pointer\"\n                        }}\n                        onClick={() => this.handleDeleteEvent(event.id)}\n                      />\n                    </span>\n                  </Tooltip>\n                }\n              />\n            );\n          })}\n        </div>\n      </Card>\n    );\n  }\n}\n","export const generateId = () => {\n    return (\n      Math.random()\n        .toString(36)\n        .substring(2) + new Date().getTime().toString(36)\n    );\n  };","import React from \"react\";\nimport { NewsFeed } from \"./Newsfeed\";\nimport { generateId } from \"./utils\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nexport class App extends React.Component {\n  state = {\n    newsFeeds: {}\n  };\n\n  componentDidMount() {\n    const newsFeeds = localStorage.getItem(\"myNewsFeeds\")\n      ? Object.entries(JSON.parse(localStorage.getItem(\"myNewsFeeds\")))\n      : [];\n    const feedsFromStorage = {};\n    for (const feed of newsFeeds) {\n      let [id, params] = feed;\n      feedsFromStorage[id] = params;\n    }\n    this.setState(() => {\n      return {\n        newsFeeds: feedsFromStorage\n      };\n    });\n  }\n\n  createNewsFeed = () => {\n    this.setState(prevState => {\n      const newsFeeds = prevState.newsFeeds;\n      const id = generateId();\n      newsFeeds[id] = {\n        name: `NF-${id.substring(0, 3)}`\n      };\n      localStorage.setItem(\"myNewsFeeds\", JSON.stringify(newsFeeds));\n      return {\n        newsFeeds: newsFeeds\n      };\n    });\n  };\n\n  refreshNewsFeeds = () => {\n    let timeout = 750;\n    for (const [key] of Object.entries(this.refs)) {\n      setTimeout(() => this.refs[key].getEvents(), timeout);\n    }\n  };\n\n  clearNewsFeedsStorage = () => {\n    localStorage.clear();\n    this.setState(() => {\n      return {\n        newsFeeds: {}\n      };\n    });\n  };\n\n  render() {\n    let button;\n    const newsFeeds = localStorage.getItem(\"myNewsFeeds\")\n      ? Object.entries(JSON.parse(localStorage.getItem(\"myNewsFeeds\")))\n      : [];\n    if (newsFeeds.length < 6) {\n      button = (\n        <button className=\"btn-minimal\" onClick={this.createNewsFeed}>\n          Create NewsFeed\n        </button>\n      );\n    } else {\n      button = (\n        <button className=\"btn-minimal\" disabled>\n          Max created\n        </button>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"row text-center\">\n          <div className=\"col-md-5 text-left\">\n            {button}\n          </div>\n          <div className=\"col-md-5 text-left\">\n            <button\n              className=\"btn-minimal\"\n              onClick={this.clearNewsFeedsStorage}\n            >\n              Clear Storage\n            </button>\n          </div>\n        </div>\n        <div className=\"row newsfeeds-card\">\n          {newsFeeds.map(([key, value]) => {\n            return (\n              <div key={key} className=\"col-md-4\">\n                <NewsFeed\n                  index={key}\n                  key={key}\n                  value={value}\n                  newsFeeds={this.state.newsFeeds}\n                  refreshNewsFeeds={this.refreshNewsFeeds}\n                  ref={key}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}